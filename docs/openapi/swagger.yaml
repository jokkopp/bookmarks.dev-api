openapi: 3.0.0
info:
  version: 2.0.0
  title: Bookmarks.dev API
  description: API supporting the www.bookmarks.dev website
  contact:
    name: Adrian Matei
    email: ama@codingpedia.org
    url: http://www.adrianmatei.me
  license:
    name: MIT

servers:
  - url: https://www.bookmarks.dev/api
    description: Main (production) server
  - url: http://localhost:3000/api
    description: Local server for development

paths:
  /:
    get:
      description: message with link to Swagger docs
      produces:
        - text/html
      responses:
        '200':
          description: message with link to Swagger docs
  /public/bookmarks:
    get:
      description: returns public bookmarks. Depending on provided query params there are
      different posibilities.
      produces:
        - application/json
      parameters:
        - in: query
          name: q
          schema:
            type: string
          required: false
          description: query text to filter bookmarks
        - in: query
          name: limit
          schema:
            type: number
          required: false
          description: limits the number of results to this value
        - in: query
          name: location
          schema:
            type: string
          required: false
          description: finds the public bookmark with this location
      responses:
        '200':
          description: latest added public bookmarks
          schema:
            type: array
            items:
              "$ref": "#/definitions/bookmark"
  "/personal/users/{userId}/bookmarks":
    get:
      description: list of user's bookmarks
      operationId: getUserBookmarks
      produces:
        - application/json
      parameters:
        - name: Authorization
          in: header
          description: Bearer token
          required: true
          type: string
        - name: userId
          in: path
          description: keycloak user id
          required: true
          type: string
      responses:
        '200':
          description: list of user's bookmarks
          schema:
            type: array
            items:
              "$ref": "#/definitions/bookmark"
        '401':
          description: unauthorized (you need to have a valid token) and userId must match the subject in token
    post:
      description: create new bookmark for user
      operationId: createBookmark
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - name: Authorization
          in: header
          description: Bearer token
          required: true
          type: string
        - name: userId
          in: path
          description: keycloak user id
          required: true
          type: string
        - in: body
          name: body
          description: Data that replaces placeholders in the sent emails
          required: true
          schema:
            "$ref": "#/definitions/bookmark"
      responses:
        '201':
          description: Empty response, status is relevant
          headers:
            location:
              schema:
                type: string
              description: resource url of the newly created bookmark
        '401':
          description: unauthorized (you need to have a valid token) and userId must match the subject in token
        '409':
          description: conflict

  "/personal/users/{userId}/bookmarks/{bookmarkId}":
    put:
      description: (full) update existing bookmark of user
      operationId: updateBookmark
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - name: Authorization
          in: header
          description: Bearer token
          required: true
          type: string
        - name: userId
          in: path
          description: keycloak user id
          required: true
          type: string
        - name: bookmarkId
          in: path
          description: id of the bookmark
          required: true
          type: string
        - in: body
          name: body
          description: Complete bookmark to be updated
          required: true
          schema:
            "$ref": "#/definitions/bookmark"
      responses:
        '200':
          description: OK when operation successful and updated bookmark in body
          schema:
            "$ref": "#/definitions/bookmark"
        '404':
          description: NOT_FOUND when bookmark cannot be found for user
          schema:
            "$ref": "#/definitions/myError"
        '401':
          description: unauthorized (you need to have a valid token) and userId must match the subject in token
        '500':
          description: internal server error, when unknown server error is catched
          schema:
            "$ref": "#/definitions/myError"
    delete:
      description: deletes bookmark of user
      operationId: updateBookmark
      parameters:
        - name: Authorization
          in: header
          description: Bearer token
          required: true
          type: string
        - name: userId
          in: path
          description: keycloak user id
          required: true
          type: string
        - name: bookmarkId
          in: path
          description: id of the bookmark
          required: true
          type: string
      responses:
        '204':
          description: OK (No content) when operation successful and bookmark was removed
        '404':
          description: NOT_FOUND when bookmark cannot be found for user
          schema:
            "$ref": "#/definitions/myError"
        '401':
          description: unauthorized (you need to have a valid token) and userId must match the subject in token
        '500':
          description: internal server error, when unknown server error is catched
          schema:
            "$ref": "#/definitions/myError"
definitions:
  bookmark:
    type: object
    required:
      - name
      - location
      - tags
      - userId
      - language
    properties:
      _id:
        type: string
      name:
        type: string
      location:
        type: string
      language:
        type: string
      tags:
        type: array
        items:
          type: string
      description:
        type: string
      descriptionHtml:
        type: string
      updatedAt:
        type: string
      createdAt:
        type: string
      lastAccessedAt:
        type: string
      publishedOn:
        type: string
      public:
        type: boolean
      userId:
        type: string
      likeCount:
        type: number
      sourceCodeURL:
        type: string
      ownerVisitCount:
        type: number
      youtubeVideoId:
        type: string
      stackoverflowQuestionId:
        type: string
  myError:
    type: object
    properties:
      title:
        type: string
      messages:
        type: array
        items:
          type: string

